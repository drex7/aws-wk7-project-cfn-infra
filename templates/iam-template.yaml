AWSTemplateFormatVersion: "2010-09-09"
Description: Stack template for iam related resources

Parameters:
  AppName: { Type: String }
  ProjectTag: { Type: String }
  ECRRepoName: { Type: String }

Resources:
  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AppName}-EventBridgeRole 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: events.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokePipeline
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${AppName}-DeployPipeline

  # IAM Role for CodePipeline
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AppName}-CodePipelineRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AppName}-CodePipelinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::artifacts-gallery-app-v2-bucket-${AWS::AccountId}/*
                  - !Sub arn:aws:s3:::artifacts-gallery-app-v2-bucket-${AWS::AccountId}
              - Effect: Allow
                Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:RegisterApplicationRevision
                Resource: "*"  
              - Effect: Allow
                Action:
                  - ecr:DescribeImages
                Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ECRRepoName}
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: "*"
            
  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AppName}-CodeDeployRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: codedeploy.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS

  # IAM Role for ECSTaskExecutionRole
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AppName}-ECSTaskExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: access-secrets-ssm
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:GetParameters"
                  - "secretsmanager:GetSecretValue"
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*"
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-ECSTaskExecutionRole"
        - Key: lab
          Value: !Sub "${ProjectTag}"

  # IAM Role for ECSTask
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AppName}-ECSTaskRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Sub "${AWS::AccountId}"
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:ecs:eu-central-1:${AWS::AccountId}:*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonRDSReadOnlyAccess
      Policies:
        - PolicyName: AccessSecretsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:GetParameters"
                  - "secretsmanager:GetSecretValue"
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*"
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-ECSTaskRole
        - Key: lab
          Value: !Sub "${ProjectTag}"

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AppName}ECSAutoScalingRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole
      Policies:
        - PolicyName: !Sub ${AppName}-ecs-service-autoscaling-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "application-autoscaling:*"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:PutMetricAlarm"
                  - "ecs:DescribeServices"
                  - "ecs:UpdateService"
                  - "logs:PutLogEvents"
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub ${AppName}ECSAutoScalingRole
        - Key: lab
          Value: !Sub '${ProjectTag}'


Outputs:
  EventBridgeRoleArn: { Value: !GetAtt EventBridgeRole.Arn }
  ECSTaskRoleArn: { Value: !GetAtt ECSTaskRole.Arn }
  ECSTaskExecutionRoleArn: { Value: !GetAtt ECSTaskExecutionRole.Arn }
  CodePipelineRoleArn: { Value: !GetAtt CodePipelineRole.Arn }
  AutoScalingRoleArn: { Value: !GetAtt AutoScalingRole.Arn }
  CodeDeployRoleArn: { Value: !GetAtt CodeDeployRole.Arn }
